Primero, carguemos los modulos que se van a usar para el ejercicio:
library(readr)
library(readr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(readr)
library(dplyr)
library(ggplot2)
library(gridExtra)
df_price<- read_csv("DataSets/house_prices.csv", col_names = TRUE)
knitr::kable(head(df_price, 10))
library(readr)
library(dplyr)
library(ggplot2)
library(gridExtra)
df_price<- read_csv("DataSets/house_prices.csv", col_names = TRUE)
knitr::kable(head(df_price, 10))
df_price$MSSubClass = factor(df_price$MSSubClass)
df_price$OverallQual = factor(df_price$OverallQual)
df_price$OverallCond = factor(df_price$OverallCond)
str(df_price)
sort(unique(df_price$MSSubClass))
sort(unique(df_price$MSZoning)) #
sort(unique(df_price$Street))
sort(unique(df_price$Alley))
sort(unique(df_price$LotShape))
sort(unique(df_price$LandContour))
sort(unique(df_price$Utilities))
sort(unique(df_price$LotConfig))
sort(unique(df_price$LandSlope))
sort(unique(df_price$Neighborhood))
sort(unique(df_price$Condition1))
sort(unique(df_price$Condition2))
sort(unique(df_price$BldgType)) #
sort(unique(df_price$HouseStyle))
sort(unique(df_price$RoofStyle))
sort(unique(df_price$RoofMatl))
sort(unique(df_price$Exterior1st))
sort(unique(df_price$Exterior2nd))
sort(unique(df_price$MasVnrType))
sort(unique(df_price$RoofMatl))
sort(unique(df_price$ExterQual))
sort(unique(df_price$ExterCond))
sort(unique(df_price$Foundation))
sort(unique(df_price$BsmtQual))
sort(unique(df_price$BsmtCond))
sort(unique(df_price$BsmtExposure))
sort(unique(df_price$BsmtFinType1))
sort(unique(df_price$BsmtFinType2))
sort(unique(df_price$Heating))
sort(unique(df_price$HeatingQC))
sort(unique(df_price$CentralAir))
sort(unique(df_price$Electrical))
sort(unique(df_price$KitchenQual))
sort(unique(df_price$Functional))
sort(unique(df_price$FireplaceQu))
sort(unique(df_price$GarageType))
sort(unique(df_price$GarageFinish))
sort(unique(df_price$GarageQual))
sort(unique(df_price$GarageCond))
sort(unique(df_price$PavedDrive))
sort(unique(df_price$PoolQC))
sort(unique(df_price$Fence))
sort(unique(df_price$MiscFeature))
sort(unique(df_price$SaleType))
sort(unique(df_price$SaleCondition))
df_price %>%
select(LotFrontage, LotArea, OverallQual, OverallCond, YearBuilt, YearRemodAdd, MasVnrArea, BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, "1stFlrSF", "2ndFlrSF", LowQualFinSF, GrLivArea, BsmtFullBath, BsmtHalfBath, FullBath, HalfBath, BedroomAbvGr, KitchenAbvGr, TotalBsmtSF, Fireplaces, GarageYrBlt, GarageCars, GarageArea, WoodDeckSF, OpenPorchSF, EnclosedPorch, "3SsnPorch", ScreenPorch, PoolArea, MiscVal, MoSold, YrSold, SalePrice) %>%
summary()
df_price %>%
group_by(PoolQC) %>%
ggplot(mapping = aes(x=PoolQC)) +
geom_bar(fill="Blue")+
xlab("Pool Quality") + ylab("Nro Casas")
df_price %>%
filter(PoolQC != "NA")%>%
ggplot(aes(PoolQC, SalePrice))+
geom_point(aes(colour = factor(PoolQC)))+
scale_y_continuous(breaks=seq(30000,755000, 100000)) +
theme_minimal()+
xlab("Pool Quality") + ylab("SalePrice")+
theme(legend.position = "none")
df_price %>%
group_by(PoolQC) %>%
ggplot(mapping = aes(x=PoolQC)) +
geom_bar(fill="Blue")+
xlab("Pool Quality") + ylab("Nro Casas")
df_price %>%
filter(PoolQC != "NA")%>%
ggplot(aes(PoolQC, SalePrice))+
geom_point(aes(colour = factor(PoolQC)))+
scale_y_continuous(breaks=seq(30000,755000, 100000)) +
theme_minimal()+
xlab("Pool Quality") + ylab("SalePrice")+
theme(legend.position = "none")
p1 = ggplot(df_price) +
aes(x = factor(MSZoning), y = SalePrice, fill = factor(MSZoning)) +
geom_boxplot() +
scale_y_continuous(breaks=seq(30000,755000, 100000)) +
theme_minimal()+
xlab("MSZoning") + ylab("SalePrice") + labs(fill='MSZoning')
p2 = ggplot(df_price) +
aes(x = factor(LotShape), y = SalePrice, fill = factor(LotShape)) +
geom_boxplot() +
scale_y_continuous(breaks=seq(30000,755000, 100000)) +
theme_minimal()+
xlab("LotShape") + ylab("SalePrice") + labs(fill='LotShape')
p3 = ggplot(df_price) +
aes(x = factor(BldgType), y = SalePrice, fill = factor(BldgType)) +
geom_boxplot() +
scale_y_continuous(breaks=seq(30000,755000, 100000)) +
theme_minimal()+
xlab("BldgType") + ylab("SalePrice") + labs(fill='BldgType')
grid.arrange(p1, p2, p3, ncol = 2)
p1 = ggplot(df_price, aes(factor(OverallQual), SalePrice))+
geom_point(aes(colour = factor(OverallQual)))+
scale_y_continuous(breaks=seq(30000,755000, 100000)) +
theme_minimal()+
xlab("OverallQual") + ylab("SalePrice")+
theme(legend.position = "none")
p2= ggplot(df_price, aes(YearBuilt, SalePrice))+
geom_point()+
scale_y_continuous(breaks=seq(30000,755000, 100000)) +
theme_minimal()+
xlab("YearBuilt") + ylab("SalePrice")+
theme(legend.position = "none")
p3= ggplot(df_price, aes(TotalBsmtSF, SalePrice))+
geom_point()+
scale_y_continuous(breaks=seq(30000,755000, 100000)) +
theme_minimal()+
xlab("TotalBsmtSF") + ylab("SalePrice")+
theme(legend.position = "none")
p4= ggplot(df_price, aes(GrLivArea, SalePrice))+
geom_point()+
scale_y_continuous(breaks=seq(30000,755000, 100000)) +
theme_minimal()+
xlab("GrLivArea") + ylab("SalePrice")+
theme(legend.position = "none")
grid.arrange(p1, p2, p3, p4, ncol = 2)
df_price %>%
filter(YrSold != "2010")%>%
ggplot(aes(LotArea, SalePrice))+
geom_point()+
scale_y_continuous(breaks=seq(30000,755000, 100000)) +
theme_minimal()+
xlab("LotArea") + ylab("SalePrice")+
facet_wrap(~MSZoning)
ggplot(data=df_price, aes(x=GarageArea, y=SalePrice)) +
geom_point() +
geom_smooth(method=lm, se=FALSE)+
theme_minimal()+
xlab("GarageArea") + ylab("SalePrice")
ggplot(data=df_price, aes(x=GarageArea, y=SalePrice)) +
geom_point() +
geom_smooth(method=lm, se=FALSE)+
theme_minimal()+
xlab("GarageArea") + ylab("SalePrice")
ggplot(data=df_price, aes(x=GarageArea, y=SalePrice)) +
geom_point() +
geom_smooth(method=loess, se=FALSE)+
theme_minimal()+
xlab("GarageArea") + ylab("SalePrice")
ggplot(data=df_price, aes(x=GarageArea, y=SalePrice)) +
geom_point() +
geom_smooth(method=loess, se=TRUE)+
theme_minimal()+
xlab("GarageArea") + ylab("SalePrice")
ggplot(data=df_price, aes(x=GarageArea, y=SalePrice)) +
geom_point() +
geom_smooth(method=loess, se=TRUE)+
theme_minimal()+
xlab("Área del Garage (sq. ft)") + ylab("Precio de Venta")
ggplot(data=df_price, aes(x=GarageArea, y=SalePrice)) +
geom_point() +
geom_smooth(method=loess, se=TRUE)+
theme_minimal()+
xlab("Área del Garage (sq. ft)") + ylab("Precio de Venta (USD)")
ggplot(data=df_price, aes(x=GrLivArea, y=SalePrice, colour=factor(HouseStyle))) +
geom_point(aes(colour = factor(HouseStyle))) +
stat_smooth(method=lm, se=FALSE)+
geom_text(aes(label=factor(HouseStyle), color=factor(HouseStyle)), size=2, check_overlap = TRUE, nudge_x = 1.0)
ggplot(data=df_price, aes(x=GrLivArea, y=SalePrice, colour=factor(HouseStyle))) +
geom_point(aes(colour = factor(HouseStyle))) +
stat_smooth(method=lm, se=FALSE)+
geom_text(aes(color=factor(HouseStyle)), size=2, check_overlap = TRUE, nudge_x = 1.0)
ggplot(data=df_price, aes(x=GrLivArea, y=SalePrice, colour=factor(HouseStyle))) +
geom_point(aes(colour = factor(HouseStyle))) +
stat_smooth(method=lm, se=FALSE)
ggplot(data=df_price, aes(x=GrLivArea, y=SalePrice, colour=factor(HouseStyle))) +
geom_point(aes(colour = factor(HouseStyle))) +
stat_smooth(method=lm, se=FALSE)+
xlab("Área general de la vivienda (sq ft.)") + ylab("Precio de Venta (USD)")
ggplot(data=df_price, aes(x=GrLivArea, y=SalePrice)) +
geom_point(aes(colour = factor(HouseStyle))) +
stat_smooth(method=lm, se=TRUE)+
+ facet_wrap(~factor(Condition1))
ggplot(data=df_price, aes(x=GrLivArea, y=SalePrice)) +
geom_point(aes(colour = factor(HouseStyle))) +
stat_smooth(method=lm, se=TRUE)+
+ facet_wrap(~factor(Condition1))+
xlab("Área general de la vivienda (sq ft.)") + ylab("Precio de Venta (USD)")+
labs(title="Precio de Venta vs. Área general de la vivienda por tipo de Condición1")
ggplot(data=df_price, aes(x=GrLivArea, y=SalePrice)) +
geom_point(aes(colour = factor(HouseStyle))) +
stat_smooth(method=lm, se=TRUE)+
facet_wrap(~factor(Condition1))+
xlab("Área general de la vivienda (sq ft.)") + ylab("Precio de Venta (USD)")+
labs(title="Precio de Venta vs. Área general de la vivienda por tipo de Condición1")
ggplot(data=df_price, aes(x=GrLivArea, y=SalePrice)) +
geom_point() +
stat_smooth(method=lm, se=TRUE)+
facet_wrap(~factor(Condition1))+
xlab("Área general de la vivienda (sq ft.)") + ylab("Precio de Venta (USD)")+
labs(title="Precio de Venta vs. Área general de la vivienda por tipo de Condición1")
df_price %>%
group_by(YrSold) %>%
ggplot(aes(x=YrSold)) +
geom_bar() +
xlab("Año de venta de las casas") + ylab("Casas vendidas")+
df_price %>%
group_by(YrSold) %>%
ggplot(aes(x=YrSold)) +
geom_bar() +
xlab("Año de venta de las casas") + ylab("Casas vendidas")
group_by(df_price, YrSold) %>%
ggplot(aes(x=YrSold)) +
geom_bar() +
xlab("Año de venta de las casas") + ylab("Casas vendidas")
group_by(df_price, YrSold) %>%
ggplot(aes(x=YrSold)) +
geom_bar(fill="blue") +
xlab("Año de venta de las casas") + ylab("Casas vendidas")
ggplot(data=df_price, aes(x=factor(Utilites), y=SalePrice)) +
geom_violin() +
theme_dark()+
xlab("Servicios Públicos Disponibles") + ylab("Precio de Venta (USD)")
ggplot(data=df_price, aes(x=factor(Utilities), y=SalePrice)) +
geom_violin() +
theme_dark()+
xlab("Servicios Públicos Disponibles") + ylab("Precio de Venta (USD)")
ggplot(data=df_price, aes(x=factor(LotConfig), y=SalePrice)) +
geom_violin() +
theme_dark()+
xlab("Servicios Públicos Disponibles") + ylab("Precio de Venta (USD)")
ggplot(data=df_price, aes(x=factor(LotConfig), y=SalePrice)) +
geom_violin() +
theme_dark()+
xlab("Configuración del Lote") + ylab("Precio de Venta (USD)")
ggplot(data=df_price, aes(x=factor(LotConfig), y=SalePrice)) +
geom_violin() +
geom_jitter(height = 0, width = 0.1)+
theme_dark()+
xlab("Configuración del Lote") + ylab("Precio de Venta (USD)")
ggplot(data=df_price, aes(x=factor(LotConfig), y=SalePrice)) +
geom_violin() +
geom_jitter(height = 0, width = 0.1)+
stat_summary(fun.y=median, geom="point", size=3, color="red") +
stat_summary(fun.y=mean, geom="point", size=3, color="green")+
theme_dark()+
xlab("Configuración del Lote") + ylab("Precio de Venta (USD)")
ggplot(data=df_price, aes(x=factor(LotConfig), y=SalePrice)) +
geom_violin() +
geom_jitter(height = 0, width = 0.1)+
stat_summary(fun=median, geom="point", size=3, color="red") +
stat_summary(fun=mean, geom="point", size=3, color="green")+
theme_dark()+
xlab("Configuración del Lote") + ylab("Precio de Venta (USD)")
ggplot(data=df_price, aes(x=GrLivArea)) +
geom_density() +
xlab("Área general de la vivienda (sq ft.)") + ylab("Densidad")
Se puede observar que la densidad se concentra mayoritariamente en las viviendas que poseen áreas entre 500 a 2000 pies cuadrados. Esto significa, que de nuestro dataset, la mayor cantidad de casas tienen un valor de área general entre estos rangos.
## Ejercicio 4
library(readr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(ggmap)
library(readr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(ggmap)
devtools::install_github("dkahle/ggmap")
df_price<- read_csv("DataSets/violent_crimes.csv", col_names = TRUE)
knitr::kable(head(df_crimes, 10))
df_crimes<- read_csv("DataSets/violent_crimes.csv", col_names = TRUE)
knitr::kable(head(df_crimes, 10))
str(df_price)
str(df_crimes)
View(df_price)
df_crimes$Resolution <- df_crimes$Resolution.as.factor()
df_crimes$Category <- df_crimes$Category.as.factor()
df_crimes$Category <- as.factor(df_crimes$Category)
df_crimes$Descript <- as.factor(df_crimes$Descript)
df_crimes$DayOfWeek <- as.factor(df_crimes$DayOfWeek)
df_crimes$PdDistrict <- as.factor(df_crimes$PdDistrict)
df_crimes$Resolution <- as.factor(df_crimes$Resolution)
str(df_crimes)
mykey = "AIzaSyCRgNUY6U40KR4MHy0RHKsUxsSRLkE_0i0"
register_google(key = mykey)
get_googlemap() %>%
ggmap() +
geom_point(data=df_crimes, aes(x = Y, y = X))
pMiss <- function(x){sum(is.na(df_crimes))/length(df_crimes)*100}
pMiss
pMiss(df_crimes)
pMiss <- function(x){sum(is.na(x))/length(x)*100}
pMiss(df_crimes)
ggmap(myMap) + geom_point(data=df_crimes, aes(x = Y, y = X))
mykey = "AIzaSyCRgNUY6U40KR4MHy0RHKsUxsSRLkE_0i0"
register_google(key = mykey)
#Los crimenes están localizados en Houston
myLocation <- "Houston"
myMap <- get_map(location = myLocation, zoom = 6)
ggmap(myMap) + geom_point(data=df_crimes, aes(x = Y, y = X))
ggmap(myMap) + geom_point(data=df_crimes, aes(x=df_crimes$Y, y=df_crimes$X))
ggmap() + geom_point(data=df_crimes, aes(x=df_crimes$Y, y=df_crimes$X))
get_googlemap %>%
ggmap() +
geom_point(data=df_crimes, aes(x=df_crimes$Y, y=df_crimes$X))
get_googlemap %>%
ggmap() +
geom_point(data=df_crimes, aes(x=Y, y=X))
ggmap(myMap) +
geom_point(data=df, aes(x=Y, y=X))
#Filtrando el dataframe
df <- filter(df_crimes, Dates >= "2021-01-01")
#Filtrando el dataframe
df <- filter(df_crimes, Dates >= "2021-01-01")
#Generando el mapa
myLocation <- "Houston"
myMap <- get_map(location = myLocation, zoom = 2)
mykey = "AIzaSyCRgNUY6U40KR4MHy0RHKsUxsSRLkE_0i0"
register_google(key = mykey)
#Filtrando el dataframe
df <- filter(df_crimes, Dates >= "2021-01-01")
#Generando el mapa
myLocation <- "Houston"
myMap <- get_map(location = myLocation, zoom = 2)
ggmap(myMap) +
geom_point(data=df, aes(x=Y, y=X))
mykey = "AIzaSyCRgNUY6U40KR4MHy0RHKsUxsSRLkE_0i0"
register_google(key = mykey)
#Filtrando el dataframe
df <- filter(df_crimes, Dates >= "2021-01-01")
#Generando el mapa
myLocation <- "Houston"
myMap <- get_map(location = myLocation, zoom = 10)
ggmap(myMap) +
geom_point(data=df, aes(x=Y, y=X))
mykey = "AIzaSyCRgNUY6U40KR4MHy0RHKsUxsSRLkE_0i0"
register_google(key = mykey)
#Filtrando el dataframe
df <- filter(df_crimes, Dates >= "2021-01-01")
#Generando el mapa
myLocation <- "Houston"
myMap <- get_map(location = myLocation, zoom = 15)
ggmap(myMap) +
geom_point(data=df, aes(x=Y, y=X))
mykey = "AIzaSyCRgNUY6U40KR4MHy0RHKsUxsSRLkE_0i0"
register_google(key = mykey)
#Filtrando el dataframe
df <- filter(df_crimes, Dates >= "2021-01-01")
#Generando el mapa
myLocation <- "Houston"
myMap <- get_map(location = myLocation, zoom = 12)
ggmap(myMap) +
geom_point(data=df, aes(x=Y, y=X))
mykey = "AIzaSyCRgNUY6U40KR4MHy0RHKsUxsSRLkE_0i0"
register_google(key = mykey)
#Filtrando el dataframe
df <- filter(df_crimes, Dates >= "2021-01-01")
#Generando el mapa
myLocation <- "Houston"
myMap <- get_map(location = myLocation, zoom = 11)
ggmap(myMap) +
geom_point(data=df, aes(x=Y, y=X))
View(df_crimes)
#Generando el mapa
myLocation <- "San Francisco"
mykey = "AIzaSyCRgNUY6U40KR4MHy0RHKsUxsSRLkE_0i0"
register_google(key = mykey)
#Filtrando el dataframe
df <- filter(df_crimes, Dates >= "2021-01-01")
#Generando el mapa
myLocation <- "San Francisco"
myMap <- get_map(location = myLocation, zoom = 11)
ggmap(myMap) +
geom_point(data=df, aes(x=Y, y=X))
mykey = "AIzaSyCRgNUY6U40KR4MHy0RHKsUxsSRLkE_0i0"
register_google(key = mykey)
#Filtrando el dataframe
df <- filter(df_crimes, Dates >= "2021-01-01")
#Generando el mapa
myLocation <- "USA"
myMap <- get_map(location = myLocation, zoom = 11)
ggmap(myMap) +
geom_point(data=df, aes(x=Y, y=X))
mykey = "AIzaSyCRgNUY6U40KR4MHy0RHKsUxsSRLkE_0i0"
register_google(key = mykey)
#Filtrando el dataframe
df <- filter(df_crimes, Dates >= "2021-01-01")
#Generando el mapa
myLocation <- "USA"
myMap <- get_map(location = myLocation, zoom = 5)
ggmap(myMap) +
geom_point(data=df, aes(x=Y, y=X))
mykey = "AIzaSyCRgNUY6U40KR4MHy0RHKsUxsSRLkE_0i0"
register_google(key = mykey)
#Filtrando el dataframe
df <- filter(df_crimes, Dates >= "2021-01-01")
#Generando el mapa
myLocation <- "California"
myMap <- get_map(location = myLocation, zoom = 6)
ggmap(myMap) +
geom_point(data=df, aes(x=Y, y=X))
mykey = "AIzaSyCRgNUY6U40KR4MHy0RHKsUxsSRLkE_0i0"
register_google(key = mykey)
#Filtrando el dataframe
df <- filter(df_crimes, Dates >= "2021-01-01")
#Generando el mapa
myLocation <- "California"
myMap <- get_map(location = myLocation, zoom = 6)
ggmap(myMap) +
geom_point(data=df_crimes, aes(x=Y, y=X))
str(df)
#Filtrando el dataframe
df <- filter(df_crimes, Dates >= "2020-01-01")
str(df)
ggmap(myMap) +
geom_point(data=df_crimes, aes(x=Y, y=X, colour=Category))
mykey = "AIzaSyCRgNUY6U40KR4MHy0RHKsUxsSRLkE_0i0"
register_google(key = mykey)
#Filtrando el dataset
df <- filter(df_crimes, Dates >= as.POSIXct("2021-01-01 00:00:00"))
#Generando el mapa
myLocation <- "California"
myMap <- get_map(location = myLocation, zoom = 6)
ggmap(myMap) +
geom_point(data=df, aes(x=Y, y=X))
mykey = "AIzaSyCRgNUY6U40KR4MHy0RHKsUxsSRLkE_0i0"
register_google(key = mykey)
#Filtrando el dataset
df <- filter(df_crimes, Dates >= as.POSIXct("2020-01-01 00:00:00"))
#Generando el mapa
myLocation <- "California"
myMap <- get_map(location = myLocation, zoom = 6)
ggmap(myMap) +
geom_point(data=df, aes(x=Y, y=X))
mykey = "AIzaSyCRgNUY6U40KR4MHy0RHKsUxsSRLkE_0i0"
register_google(key = mykey)
#Generando el mapa
myLocation <- "California"
myMap <- get_map(location = myLocation, zoom = 6)
ggmap(myMap) +
geom_point(data=df_crimes, aes(x=Y, y=X))
ggmap() +
geom_point(data=df_crimes, aes(x=Y, y=X))
#Generando el mapa
#myLocation <- "California"
myMap <- get_map()
mykey = "AIzaSyCRgNUY6U40KR4MHy0RHKsUxsSRLkE_0i0"
register_google(key = mykey)
#Generando el mapa
#myLocation <- "California"
myMap <- get_map()
ggmap(myMap) +
geom_point(data=df_crimes, aes(x=Y, y=X))
myLocation <- "California"
myMap <- get_map(location = myLocation, zoom = 6)
ggmap(myMap) +
geom_point(data=df_crimes, aes(x=Y, y=X))
